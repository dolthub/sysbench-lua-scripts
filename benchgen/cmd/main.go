package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"io"
	"os"
	"path"

	"github.com/dolthub/sysbench-lua-scripts/systabgen/cmd/support"
)

var (
	errInvalidArgCount     = errors.New("invalid number of arguments")
	errUnrecognizedCommand = errors.New("unrecognized command")
)

var (
	out = flag.String("out", "", "output file name of generated code")
)

const useGoFmt = true

func main() {
	flag.Parse()

	args := flag.Args()
	if len(args) < 2 {
		exit(errInvalidArgCount)
	}

	cmd := args[0]
	switch cmd {
	case "systab":
	default:
		exit(errUnrecognizedCommand)
	}

	sources := flag.Args()[1:]
	readers := make([]io.Reader, len(sources))
	for i, name := range sources {
		file, err := os.Open(name)
		if err != nil {
			exit(err)
		}

		defer file.Close()
		readers[i] = file
	}

	if *out != "" {
		if _, err := os.Stat(*out); os.IsNotExist(err) {
			err := os.Mkdir(*out, 0777)
			if err != nil {
				exit(err)
			}
		} else if err != nil {
			exit(err)
		}
	}

	var err error
	switch cmd {
	case "systab":
		err = generateSystab(sources, *out)
	}

	if err != nil {
		exit(err)
	}
}

func exit(err error) {
	fmt.Fprintf(os.Stderr, "ERROR: %v\n", err)
	os.Exit(2)
}

func generateSystab(sources []string, dir string) error {
	var allDefs []support.ScriptDef
	for _, s := range sources {
		defs, err := support.ParseTestsFile(s)
		if err != nil {
			return err
		}
		allDefs = append(allDefs, defs.Scripts...)
	}
	var gen support.ScriptGen
	return generate(allDefs, dir, gen.Generate)
}

func generate(defines []support.ScriptDef, dir string, genFunc func(d support.ScriptDef, w io.Writer)) error {
	for _, d := range defines {
		var buf bytes.Buffer

		buf.WriteString("-- Code generated by benchgen; DO NOT EDIT.\n\n")
		genFunc(d, &buf)

		var b []byte
		var err error

		b = buf.Bytes()

		var w io.Writer
		if dir != "" {
			w, err = os.OpenFile(path.Join(dir, d.Name+".gen.lua"), os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0666)
			if err != nil {
				return err
			}
		} else {
			w = os.Stderr
		}

		_, err = w.Write(b)
		if err != nil {
			return err
		}
	}
	return nil
}
